image: mcr.microsoft.com/dotnet/sdk:8.0

stages:
    - ðŸ¦º build
    - ðŸ§ª test
    - ðŸ›ƒ security-scan

build:
    stage: ðŸ¦º build
    script:
        - "dotnet build Desu"
    artifacts:
      paths:
        - Desu/bin/

# dotnet test generates JUnit format logs for GitLab test reporting (https://docs.gitlab.com/ee/ci/unit_test_reports.html#net-example)
# and collects code coverage report (https://github.com/coverlet-coverage/coverlet)
# however coverage report is not in a useful format, so create a report from it (https://github.com/danielpalme/ReportGenerator) which requires installing as a tool
# finally, cat the coverage report summary so it is displayed in the job log - which can then be regex'd from gitlab (https://docs.gitlab.com/ee/ci/yaml/index.html#coverage)
test:
    stage: ðŸ§ª test
    script:
        - 'dotnet test 
            --test-adapter-path:. --logger:"junit;LogFilePath=..\artifacts\{assembly}-test-result.xml;MethodFormat=Class;FailureBodyFormat=Verbose"
            --collect:"XPlat Code Coverage" --results-directory:".\artifacts"'
        - 'export PATH="$PATH:/root/.dotnet/tools"'
        - 'dotnet tool install -g dotnet-reportgenerator-globaltool'
        - 'reportgenerator "-reports:./**/coverage.cobertura.xml" "-targetdir:./artifacts/report" "-reporttypes:Html;TextSummary"'
        - 'cat ./artifacts/report/Summary.txt'
    coverage: '/Line coverage: \d+\.\d+%/'

    artifacts:
        when: always
        paths:
            - ./**/*test-result.xml
        reports:
            junit:
                - ./**/*test-result.xml
            coverage_report:
                coverage_format: cobertura
                path: ./**/coverage.cobertura.xml

# security scanning
# https://docs.gitlab.com/ee/user/application_security/#security-scanning-without-auto-devops
# https://docs.gitlab.com/ee/user/application_security/#using-a-custom-scanning-stage
include:
    - template: Jobs/Dependency-Scanning.gitlab-ci.yml
#    - template: Jobs/SAST.gitlab-ci.yml
    - template: Jobs/Secret-Detection.gitlab-ci.yml

dependency_scanning:
    stage: ðŸ›ƒ security-scan

# currently not able to get SAST working in this repo;
# GitLab's using `security-code-scan` for .NET SAST 
# (https://docs.gitlab.com/ee/user/application_security/sast/analyzers.html / https://security-code-scan.github.io/)
# which fails due to the example WPF .NET Framework project in the solution
# it seems as though SAST_EXCLUDED_PATHS has no effect, so unable to ignore the WPF project
# --------------------------------------------------
# will try to re-enable this when either:
# a) specific projects are able to be excluded from security-code-scan analyser (https://gitlab.com/gitlab-org/gitlab/-/issues/360181 ?)
# b) GitLab adopts semgrep analyser for .NET (https://gitlab.com/gitlab-org/gitlab/-/issues/347258)
#sast:
#    stage: ðŸ›ƒ security-scan
    
.secret-analyzer:
    stage: ðŸ›ƒ security-scan